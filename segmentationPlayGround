/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[31.259674072265625, 30.55282313470929],
          [31.259674072265625, 30.189079990629303],
          [31.884521484375, 30.189079990629303],
          [31.884521484375, 30.55282313470929]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Load a pre-computed Landsat composite for input.
var input = ee.Image('LANDSAT/LE7_TOA_1YEAR/2001').clip(geometry);

// Define a region in which to generate a sample of the input.
var region = ee.Geometry.Rectangle(29.7, 30, 32.5, 31.7);

// Display the sample region.
Map.setCenter(31.5, 31.0, 8);
Map.addLayer(ee.Image().paint(region, 0, 2), {}, 'region');
// var segmentation=ee.Algorithms.Image.Segmentation.KMeans({image:input, gridSize:40})
// ee.Algorithms.Image.Segmentation.seedGrid(size, gridType)	
var segmentation=ee.Algorithms.Image.Segmentation.SNIC({
  image:input,
  size:100,
  connectivity:8,
  compactness:3
  // gridSize:120
})
print(segmentation,"segmented image")
Map.addLayer(input, {}, 'input');
Map.addLayer(segmentation.select("clusters"), {min:0,max:2000000000,palette:['000000', 'FFFF00', 'FFA500', 'FF4500', 'FF0000']}, 'segmentation');
print(input)
// // Make the training dataset.
// var training = input.sample({
//   region: region,
//   scale: 30,
//   numPixels: 5000
// });

// // Instantiate the clusterer and train it.
// var clusterer = ee.Clusterer.wekaKMeans(15).train(training);

// // Cluster the input using the trained clusterer.
// var result = input.cluster(clusterer);

// // Display the clusters with random colors.
