/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var ic = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR"),
    tiny = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-81.61639551737136, 32.722195859625565],
          [-81.61639551737136, 32.72160351425631],
          [-81.6150155208332, 32.72160351425631],
          [-81.6150155208332, 32.722195859625565]]], null, false),
    lt7t1 = ee.ImageCollection("LANDSAT/LE07/C01/T1_SR"),
    lt8t1 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR"),
    l5toa = ee.ImageCollection("LANDSAT/LT05/C01/T1_TOA"),
    l7toa = ee.ImageCollection("LANDSAT/LE07/C01/T1_TOA"),
    l8toa = ee.ImageCollection("LANDSAT/LC08/C01/T1_TOA"),
    table = ee.FeatureCollection("users/sobata5632/WRS2_descending"),
    shp1737 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p17r37-points"),
    shp1838 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p18r38-points"),
    shp1738 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p17r38-points"),
    shp1739 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p17r39-points"),
    shp1938 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p19r38-points"),
    shp1836 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p18r36-points"),
    shp1837 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p18r37-points"),
    shp1839 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p18r39-points"),
    shp1936 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p19r36-points"),
    shp1937 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p19r37-points"),
    shp1939 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p19r39-points"),
    shp2036 = ee.FeatureCollection("users/sobata5632/backtracking/bted_p20r36-points");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Map.addLayer(fiaFP,{},"FP")
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Parameters setting
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Model Parameters
{
var combo=["w","short"]//
var path=17
var row=39
var shp=shp1739
//%%%%%%%%%%%%%%%%%%%%%9%%%%%%%%%%%%%%%%%%%%%%%
var feature={
  "nir":["B4","NIR"],
  "ndvi":["NDVI","ndvi"],
  "w":["wetness","tcw"],
  "b":["brightness","tcb"],
  "g":["greenness","tcg"]}
var pod={"long":["1984-01-01","2016-12-31"],"short":["2014-01-01","2016-12-31"]}//period of time
var upper=1300
var lower=upper-1300
var startdate=pod[combo[1]][0]
var enddate=pod[combo[1]][1]
print(shp)

//print(shp.reduceColumns(ee.Reducer.toList(2),["X", "VPAAgg"]))
var point=shp
.filterMetadata("X","not_greater_than",upper)
.filterMetadata("X","greater_than",lower)
print(point)

var filterStart=ee.Date(startdate)
var filterEnd=ee.Date(enddate)
var filS2D=ee.String(filterStart.get("year")).slice(2,4).getInfo()
var filE2D=ee.String(filterEnd.get("year")).slice(2,4).getInfo()
var avgRange=3
var mifpar=5
var tolpar=3
// Preprocessing parameters 
var Foo = require('users/sobata5632/HarmonicData:harmonicDataCreation/HarmonicData.js');//Module for this data. 
var bands=['B1','B2','B3','B4','B5','B6','B7','pixel_qa']// Set up bands for landsat 5 &7
var bands8=['B1','B2','B3','B4','B5','B6','B7','pixel_qa']// Set up bands for landsat 8
}

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Shapefile setting
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{
var shape=table
.filterMetadata('ROW','equals',row)
.filterMetadata('PATH','equals',path)

var center=shape.geometry().centroid()
var expBounds=shape.geometry()
Map.addLayer(expBounds)
Map.addLayer(point)
//Map.addLayer(disty.select("b1"),
//{min:1990,max:1992,palette:['000000', 'FFFF00', 'FFA500', 'FF4500', 'FF0000']},
//"Last disturbance year")
}

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//Landsat 5 data processing
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
{
var lt5=Foo.landsat(
  ic,//imgcol
  center,//boundary
  '1984-05-01',//sampletimestart
  '2012-5-31',//sampletimestart
  50,//cloudpct
  bands,//bands
  66,//masknum
  '((R**2+SWIR1**2+SWIR2**2)/3)**0.5',//formula
  'B3',//r
  'B4',//nir
  'B5',//swir1
  'B7',//swir2
  0.1,//alpha
  '(alpha*NIR-R)/(alpha*NIR+R)',//formula_wdrvi,
//from here for tc
  ee.List(['B1','B2','B3','B4','B5','B7']),//toaRefBands, 
  'BQA',//toaMaskband,
  l5toa,//imgColTOA,
  ee.Array([
  [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
  [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
  [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],
  [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],
  [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],
  [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]
]),//TCCoefficients,
  672,//toaMaskNum1,
  676,//toaMaskNum2,
  680,//toaMaskNum3,
  684,//toaMaskNum4
  'brightness',
  'greenness',
  'wetness'
  );

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//Landsat 7 data processing
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
var lt7=Foo.landsat(
  lt7t1,//imgcol
  center,//boundary
  '2011-01-01',//sampletimestart
  '2019-4-30',//sampletimestart
  50,//cloudpct
  bands,//bands
  66,//masknum
  '((R**2+SWIR1**2+SWIR2**2)/3)**0.5',//formula
  'B3',//r
  'B4',//nir
  'B5',//swir1
  'B7',//swir2
  0.1,//alpha
  '(alpha*NIR-R)/(alpha*NIR+R)',//formula_wdrvi
//from here for tc
  ee.List(['B1','B2','B3','B4','B5','B7']),//toaRefBands, 
  'BQA',//toaMaskband,
  l7toa,//imgColTOA,
  ee.Array([
  [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
  [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
  [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],
  [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],
  [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],
  [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]
]),//TCCoefficients,
  672,//toaMaskNum1,
  676,//toaMaskNum2,
  680,//toaMaskNum3,
  684,//toaMaskNum4
  'brightness',
  'greenness',
  'wetness'
  );
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//Landsat 8 data processing
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
var lt8=Foo.landsat(
  lt8t1,//imgcol
  center,//boundary specifier acquired from shapefile
  '2013-01-01',//sampletimestart
  '2019-12-31',//sampletimeend
  50,//cloudpct
  bands8,//bands
  322,//masknum
  '((R**2+SWIR1**2+SWIR2**2)/3)**0.5',//formula
  'B4',//r
  'B5',//nir
  'B6',//swir1
  'B7',//swir2
  0.1,//alpha
  '(alpha*NIR-R)/(alpha*NIR+R)',//formula_wdrvi
//from here for tc
  ee.List(['B2','B3','B4','B5','B6','B7']),//toaRefBands, 
  'BQA',//toaMaskband,
  l8toa,//imgColTOA,
  ee.Array([
  [0.3029, 0.2786, 0.4733, 0.5599, 0.5080, 0.1872],
  [-0.2941, -0.2430, -0.5424, 0.7276, 0.0713, -0.1608],
  [0.1511, 0.1973, 0.3283, 0.3407, -0.7117, -0.4559],
  [-0.8239, 0.0849, 0.4396, -0.0580, 0.2013, -0.2773],
  [-0.3294, 0.0557, 0.1056, 0.1855, -0.4349, 0.8085],
  [0.1079, -0.9023, 0.4119, 0.0575, -0.0259, 0.0252]
]),//TCCoefficients,
  2720,//toaMaskNum1,
  2724,//toaMaskNum2,
  2728,//toaMaskNum3,
  2732,//toaMaskNum4
  'brightness',
  'greenness',
  'wetness'
  );
  */
}

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Add variables to the preprocessed data
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var tc=ee.ImageCollection(
  lt5[2].merge(lt7[2])
  )
  .filterDate(filterStart,filterEnd).sort('system:time_start')
  .select(feature[combo[0]][0])
print(tc)

//Function to add constant and time variables to imagecollection
var addVariables = function(image) {
  // Compute time in fractional years since the epoch.
  var years = image.date().difference(ee.Date('2013-01-01'), 'year');
  return image
    .addBands(ee.Image(years).rename('t'))    // Time band.
    .addBands(ee.Image.constant(1))           // Constant band.
    .float()
};
// Add variables for time and a constant to Merged IFZ
var tcb=tc.select(feature[combo[0]][0]).map(addVariables)
var tcbH=Foo.harmonicRegressionFit(['constant', 't', 'cos', 'sin'],feature[combo[0]][0],tcb,3)
print(tcbH)
var maximum=tcbH[0].select("HarmonicFit").max()
var minimum=tcbH[0].select("HarmonicFit").min()
var mean=tcbH[0].select("HarmonicFit").mean()
var rmse=tcbH[0].select("SE").sum().sqrt()
print(rmse)
var bType=["max","min","mean","rmse","amp"]
var bNames=bType.map(function(elem){
  var elemComp=feature[combo[0]][1]+"_p"+path+"r"+row+"_"+filS2D+"-"+filE2D+"_"+elem
  return elemComp
})
var outRaster=maximum.addBands([minimum,mean,rmse,tcbH[1]]).rename(bType).clip(expBounds)

// //===================================================
// // Extract time series TCW
// //===================================================
Map.addLayer(outRaster)
Export.image.toDrive({
  image: outRaster,
  region: expBounds,
  folder:"p"+path+"r"+row,
  description:feature[combo[0]][1]+"_p"+path+"r"+row+"_"+filS2D+"-"+filE2D,
  //maxPixels:10e12,
  scale: 30,
  fileFormat: 'GeoTIFF'
})
  

var bNamesFeature = ee.FeatureCollection(bNames.map(function(elem){
  return ee.Feature(null, {bName:elem})
}));
print(bNamesFeature);
Export.table.toDrive({
    collection: bNamesFeature,
    folder:"p"+path+"r"+row,
    description: feature[combo[0]][1]+"_p"+path+"r"+row+"_"+filS2D+"-"+filE2D+"_bNames",
    fileFormat: 'CSV'
  });